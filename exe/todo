#!/usr/bin/env ruby

require 'thor'
require_relative '../lib/todo'

class TodoCLI < Thor
  desc 'list', 'List all tasks'
  def list
    puts todo.list_tasks.to_json
  # puts task.to_json
  rescue Todo::TodoError => e
    puts "ERROR: #{e.message}"
  end

  desc 'find', 'Find task by ID'
  def find(id)
    task = todo.find_task id

    return if task.nil?

    puts task.to_json
  rescue Todo::TodoError => e
    puts "ERROR: #{e.message}"
  end

  desc 'delete', 'Delete task by ID'
  def delete(id)
    deleted_task = todo.delete_task id

    return if deleted_task.nil?

    puts deleted_task.to_json
  rescue Todo::TodoError => e
    puts "ERROR: #{e.message}"
  end

  desc 'create TITLE', 'Create task with TITLE'
  option :description, desc: 'Description of the task'
  option :done, type: :boolean, desc: 'Task as done'
  option :undone, type: :boolean, desc: 'Task as undone'
  option :deadline, desc: 'Deadline'

  def create(title)
    attributes = {}
    attributes[:description] = options[:description] if options[:description]

    if options[:done] && options[:undone]
      return
    elsif options[:done]
      attributes[:done] = true
    elsif options[:undone]
      attributes[:done] = false
    end

    attributes[:deadline] = options[:deadline] if options[:deadline]

    new_task = todo.create_task(title, **attributes)

    return if new_task.nil?

    puts new_task.to_json
  rescue Todo::TodoError => e
    puts "ERROR: #{e.message}"
  end

  desc 'edit ID', 'Edit task by ID'
  option :title, desc: 'New title'
  option :description, desc: 'New description'
  option :done, type: :boolean, desc: 'Task as done'
  option :undone, type: :boolean, desc: 'Task undone'
  option :deadline, desc: 'New deadline'

  def edit(id)
    attributes = {}
    attributes[:title] = options[:title] if options[:title]
    attributes[:description] = options[:description] if options[:description]

    if options[:done] && options[:undone]
      return
    elsif options[:done]
      attributes[:done] = true
    elsif options[:undone]
      attributes[:done] = false
    end

    attributes[:deadline] = options[:deadline] if options[:deadline]

    return if attributes.empty?

    edit_task = todo.edit_task(id, **attributes)
    return if edit_task.nil?

    puts edit_task.to_json
  rescue Todo::TodoError => e
    puts "ERROR: #{e.message}"
  end

  no_commands do
    def todo
      @todo ||= Todo.new username
    rescue Todo::InvalidUsernameError => e
      response = ask "Username not found (#{username}), should i create it?[Y,n]"
      raise e unless ['y', 'Y', ''].include? response

      @todo = Todo.new username, force: true
    end

    def username
      return @username unless @username.nil?

      username = ENV.fetch 'TODO_USERNAME', nil

      raise Todo::TodoError.new('Please set TODO_USERNAME env variable') if username.nil? || username.empty?

      @username = username
    end
  end
end
TodoCLI.start ARGV
